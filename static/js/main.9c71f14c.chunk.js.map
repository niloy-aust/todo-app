{"version":3,"sources":["Todo.js","NewTodoForm.js","TodoList.js","App.js","serviceWorker.js","index.js"],"names":["Todo","props","state","isEditing","task","toggleForm","bind","handleUpdate","handleChange","this","setState","event","preventDefault","updateTodo","id","target","name","value","onSubmit","className","type","onChange","onClick","removeTodo","Component","NewTodoForm","handleSubmit","createTodo","uuid","htmlFor","placeholder","TodoList","todos","create","update","newTodo","todo","filter","t","updatedTask","updatedTodos","map","key","remove","style","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9c71f14c.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nclass Todo extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      isEditing: false,\r\n      task: this.props.task\r\n    };\r\n\r\n    this.toggleForm = this.toggleForm.bind(this);\r\n    this.handleUpdate = this.handleUpdate.bind(this);\r\n    this.handleChange = this.handleChange.bind(this);\r\n  }\r\n  toggleForm() {\r\n    this.setState({\r\n      task: this.state.task,\r\n      isEditing: !this.state.isEditing\r\n    });\r\n  }\r\n  handleUpdate(event) {\r\n    event.preventDefault();\r\n    this.props.updateTodo(this.props.id, this.state.task);\r\n    this.setState({\r\n      isEditing: false\r\n    });\r\n  }\r\n  handleChange(event) {\r\n    this.setState({\r\n      [event.target.name]: event.target.value\r\n    });\r\n  }\r\n  render() {\r\n    let result;\r\n    //console.log(this.state.task)\r\n    if (this.state.isEditing) {\r\n      result = (\r\n        <div>\r\n          <form onSubmit={this.handleUpdate}>\r\n            <input\r\n            className=\"form-control\"\r\n              type=\"text\"\r\n              onChange={this.handleChange}\r\n              value={this.state.task}\r\n              id=\"task\"\r\n              name=\"task\"\r\n            />\r\n            <button className=\"ml-3 btn btn-success btn-md\">Update</button>\r\n          </form>\r\n        </div>\r\n      );\r\n    } else\r\n      result = ( \r\n        <div>\r\n          <li className=\"list-group-item\">\r\n            <i className=\"fa fa-list mr-3\"></i>\r\n            {this.props.task}\r\n            <span>\r\n              <i\r\n                className=\"fa fa-pencil ml-3 mr-2\"\r\n                onClick={this.toggleForm}\r\n              ></i>\r\n            </span>\r\n            <span>\r\n              <i className=\"fa fa-trash\" onClick={this.props.removeTodo}></i>\r\n            </span>\r\n          </li>\r\n        </div>\r\n      );\r\n\r\n    return result;\r\n  }\r\n}\r\nexport default Todo;\r\n","import React, { Component } from \"react\";\r\nimport uuid from \"uuid/v4\";\r\nclass NewTodoForm extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { task: \"\" };\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n  }\r\n  handleChange(event) {\r\n    this.setState({\r\n      [event.target.name]: event.target.value\r\n    });\r\n  }\r\n  handleSubmit(event) {\r\n    event.preventDefault();\r\n    this.props.createTodo({ ...this.state, id: uuid(), isEditing: false });\r\n    this.setState({\r\n      task: \"\"\r\n    });\r\n  }\r\n  render() {\r\n    return (\r\n      <div>\r\n        <form onSubmit={this.handleSubmit} className=\"font-weight-bold className mb-4\">\r\n          <label htmlFor=\"task\">\r\n            <strong>New Todo</strong>\r\n          </label>\r\n          <input\r\n            className=\"form-control\"\r\n            type=\"text\"\r\n            placeholder=\"New Todo\"\r\n            id=\"task\"\r\n            name=\"task\"\r\n            value={this.state.task}\r\n            onChange={this.handleChange}\r\n          />\r\n          <button className=\"btn btn-md btn-success mt-2\">Add Todo</button>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default NewTodoForm;\r\n","import React, { Component } from 'react'\r\nimport Todo from './Todo';\r\nimport NewTodoForm from './NewTodoForm';\r\nclass TodoList extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {todos:[]};\r\n        this.create = this.create.bind(this);\r\n         this.update = this.update.bind(this);\r\n    }\r\n    create(newTodo){\r\n        this.setState({\r\n            todos: [...this.state.todos,newTodo]\r\n        })\r\n    }\r\n\r\n    remove(id){\r\n        const todos = [...this.state.todos];\r\n        const todo = todos.filter(t => t.id !== id)\r\n        this.setState({todos:todo});\r\n    }\r\n    update(id,updatedTask){\r\n        const updatedTodos = this.state.todos.map(todo =>\r\n            {\r\n                if(todo.id === id) return {...todo,task:updatedTask}\r\n                return todo;\r\n            })\r\n        this.setState({todos:updatedTodos});\r\n    }\r\n\r\n    render(){\r\n        const h1 = {\r\n            'textAlign':'center'\r\n        }\r\n        \r\n        const todos = this.state.todos.map(todo=>{\r\n            return <Todo key= {todo.id} id={todo.id} task={todo.task} removeTodo={()=>this.remove(todo.id)} updateTodo={this.update} />\r\n        })\r\n        return(\r\n            <div>\r\n                <h1 style={h1}>Todo List</h1>\r\n                <NewTodoForm createTodo={this.create} />\r\n                <ul className=\"list-group\">{todos}</ul>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default TodoList;","import React, { Component } from \"react\";\nimport TodoList from \"./TodoList\";\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"row justify-content-center\">\n        <div className=\"col-md-6 card\">\n          <div className=\"card-body\">\n            <TodoList />\n          </div>\n        </div>\n      </div>\n    );\n    }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'font-awesome/css/font-awesome.min.css';\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}